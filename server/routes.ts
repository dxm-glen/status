import type { Express, Request } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { insertUserSchema, insertUserAnalysisSchema } from "@shared/schema";
import { analyzeUserInput, generateMissions } from "./bedrock";
import { z } from "zod";

// Extend Express Request type to include session
declare module 'express-serve-static-core' {
  interface Request {
    session: {
      userId?: number;
      questionnaireData?: {
        inputMethod: string;
        inputData: any;
      };
      destroy(callback: (err?: any) => void): void;
    };
  }
}

export async function registerRoutes(app: Express): Promise<Server> {
  // User registration
  app.post("/api/register", async (req, res) => {
    try {
      const userData = insertUserSchema.parse(req.body);
      
      // Check if username already exists
      const existingUser = await storage.getUserByUsername(userData.username);
      if (existingUser) {
        return res.status(400).json({ message: "Username already exists" });
      }

      // Create user
      const user = await storage.createUser(userData);
      
      let generatedStats = {
        intelligence: 0,
        creativity: 0,
        social: 0,
        physical: 0,
        emotional: 0,
        focus: 0,
        adaptability: 0,
        totalPoints: 0,
        level: 1,
      };

      // If questionnaire data exists in session, analyze it with Bedrock and generate stats
      if (req.session.questionnaireData) {
        try {
          // Create initial analysis record with pending status
          const pendingAnalysis = await storage.createUserAnalysis({
            userId: user.id,
            inputMethod: req.session.questionnaireData.inputMethod,
            inputData: req.session.questionnaireData.inputData,
            analysisResult: { status: 'pending' },
          });

          // Analyze user input with Bedrock AI
          generatedStats = await analyzeUserInput(
            req.session.questionnaireData.inputMethod,
            req.session.questionnaireData.inputData
          );

          // Extract summary and explanations from Bedrock response
          const { summary, statExplanations, ...statsOnly } = generatedStats;
          
          // Update analysis record with results
          await storage.createUserAnalysis({
            userId: user.id,
            inputMethod: req.session.questionnaireData.inputMethod,
            inputData: req.session.questionnaireData.inputData,
            analysisResult: { ...statsOnly, status: 'completed' },
            summary: summary || null,
            statExplanations: statExplanations || null,
          });

          // Clear the session data
          delete req.session.questionnaireData;
        } catch (error) {
          console.error("Bedrock analysis failed:", error);
          // Create failed analysis record
          await storage.createUserAnalysis({
            userId: user.id,
            inputMethod: req.session.questionnaireData.inputMethod,
            inputData: req.session.questionnaireData.inputData,
            analysisResult: { status: 'failed', error: error.message },
          });
          delete req.session.questionnaireData;
        }
      }

      // Create user stats (either generated by Bedrock or default zeros)
      await storage.createUserStats({
        userId: user.id,
        ...generatedStats,
      });

      res.json({ 
        user: { id: user.id, username: user.username, nickname: user.nickname },
        statsGenerated: req.session.questionnaireData !== undefined
      });
    } catch (error) {
      console.error("Registration error:", error);
      res.status(400).json({ message: "Invalid registration data" });
    }
  });

  // User login
  app.post("/api/login", async (req, res) => {
    try {
      const { username, password } = req.body;
      
      if (!username || !password) {
        return res.status(400).json({ message: "Username and password required" });
      }

      const user = await storage.getUserByUsername(username);
      if (!user || user.password !== password) {
        return res.status(401).json({ message: "Invalid credentials" });
      }

      // Set session
      (req.session as any).userId = user.id;
      
      res.json({ user: { id: user.id, username: user.username, nickname: user.nickname } });
    } catch (error) {
      console.error("Login error:", error);
      res.status(500).json({ message: "Login failed" });
    }
  });

  // Get current user
  app.get("/api/user", async (req, res) => {
    try {
      const userId = (req.session as any).userId;
      if (!userId) {
        return res.status(401).json({ message: "Not authenticated" });
      }

      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(404).json({ message: "User not found" });
      }

      res.json({ user: { id: user.id, username: user.username, nickname: user.nickname } });
    } catch (error) {
      console.error("Get user error:", error);
      res.status(500).json({ message: "Failed to get user" });
    }
  });

  // Get user stats
  app.get("/api/user/stats", async (req, res) => {
    try {
      const userId = (req.session as any).userId;
      if (!userId) {
        return res.status(401).json({ message: "Not authenticated" });
      }

      const stats = await storage.getUserStats(userId);
      if (!stats) {
        return res.status(404).json({ message: "Stats not found" });
      }

      // Get latest analysis status and summary
      const analyses = await storage.getUserAnalysis(userId);
      const latestAnalysis = analyses[analyses.length - 1];
      const analysisStatus = latestAnalysis?.analysisResult?.status || 'none';
      const analysisSummary = latestAnalysis?.summary || null;
      const statExplanations = latestAnalysis?.statExplanations || null;

      res.json({ 
        stats, 
        analysisStatus,
        analysisSummary,
        statExplanations,
        hasAnalysisData: analyses.length > 0 
      });
    } catch (error) {
      console.error("Get user stats error:", error);
      res.status(500).json({ message: "Failed to get user stats" });
    }
  });

  // Retry analysis
  app.post("/api/retry-analysis", async (req, res) => {
    try {
      const userId = (req.session as any).userId;
      if (!userId) {
        return res.status(401).json({ message: "Not authenticated" });
      }

      // Get user's analysis data
      const analyses = await storage.getUserAnalysis(userId);
      if (analyses.length === 0) {
        return res.status(404).json({ message: "No analysis data found" });
      }

      const latestAnalysis = analyses[analyses.length - 1];
      
      try {
        // Retry Bedrock analysis
        const generatedStats = await analyzeUserInput(
          latestAnalysis.inputMethod,
          latestAnalysis.inputData
        );

        // Update analysis record with results
        await storage.createUserAnalysis({
          userId,
          inputMethod: latestAnalysis.inputMethod,
          inputData: latestAnalysis.inputData,
          analysisResult: { ...generatedStats, status: 'completed' },
        });

        // Update user stats
        await storage.updateUserStats(userId, generatedStats);

        res.json({ 
          message: "Analysis completed successfully",
          stats: generatedStats
        });
      } catch (error) {
        console.error("Retry analysis failed:", error);
        await storage.createUserAnalysis({
          userId,
          inputMethod: latestAnalysis.inputMethod,
          inputData: latestAnalysis.inputData,
          analysisResult: { status: 'failed', error: error.message },
        });
        res.status(500).json({ message: "Analysis failed again: " + error.message });
      }
    } catch (error) {
      console.error("Retry analysis error:", error);
      res.status(500).json({ message: "Failed to retry analysis" });
    }
  });

  // Submit questionnaire (for non-authenticated users)
  app.post("/api/submit-questionnaire", async (req, res) => {
    try {
      const { answers } = req.body;
      if (!answers || typeof answers !== 'object') {
        return res.status(400).json({ message: "Invalid questionnaire data" });
      }

      // Store in session for later use after registration
      req.session.questionnaireData = {
        inputMethod: 'questionnaire',
        inputData: answers,
      };
      
      res.json({ message: "Questionnaire submitted successfully" });
    } catch (error) {
      console.error("Questionnaire submission error:", error);
      res.status(500).json({ message: "Failed to submit questionnaire" });
    }
  });

  // Submit GPT analysis (for non-authenticated users)
  app.post("/api/submit-gpt-analysis", async (req, res) => {
    try {
      const { gptResponse } = req.body;
      if (!gptResponse || typeof gptResponse !== 'string') {
        return res.status(400).json({ message: "Invalid GPT response data" });
      }

      // Store in session for later use after registration
      req.session.questionnaireData = {
        inputMethod: 'gpt-paste',
        inputData: { gptResponse },
      };
      
      res.json({ message: "GPT analysis submitted successfully" });
    } catch (error) {
      console.error("GPT analysis submission error:", error);
      res.status(500).json({ message: "Failed to submit GPT analysis" });
    }
  });

  // Get user missions
  app.get("/api/user/missions", async (req, res) => {
    const userId = req.session.userId;
    if (!userId) {
      return res.status(401).json({ message: "Not authenticated" });
    }

    try {
      const missions = await storage.getUserMissions(userId);
      res.json({ missions });
    } catch (error) {
      console.error("Get missions error:", error);
      res.status(500).json({ message: "Failed to fetch missions" });
    }
  });

  // Generate AI missions for user
  app.post("/api/user/generate-missions", async (req, res) => {
    const userId = req.session.userId;
    if (!userId) {
      return res.status(401).json({ message: "Not authenticated" });
    }

    try {
      // Get user stats
      const userStats = await storage.getUserStats(userId);
      if (!userStats) {
        return res.status(404).json({ message: "User stats not found" });
      }

      // Generate missions using Bedrock AI
      const generatedMissions = await generateMissions(userId, userStats);
      
      // Save missions to database
      const savedMissions = [];
      for (const mission of generatedMissions) {
        const savedMission = await storage.createMission({
          userId,
          title: mission.title,
          description: mission.description,
          difficulty: mission.difficulty,
          estimatedTime: mission.estimatedTime,
          targetStat: mission.targetStat,
          isAiGenerated: true
        });
        savedMissions.push(savedMission);
      }

      res.json({ 
        message: "AI missions generated successfully",
        missions: savedMissions 
      });
    } catch (error) {
      console.error("Generate missions error:", error);
      res.status(500).json({ message: "Failed to generate missions" });
    }
  });

  // Add custom mission
  app.post("/api/user/missions", async (req, res) => {
    const userId = req.session.userId;
    if (!userId) {
      return res.status(401).json({ message: "Not authenticated" });
    }

    try {
      const { title, description, difficulty, estimatedTime, targetStat } = req.body;
      
      if (!title || !description || !difficulty || !estimatedTime || !targetStat) {
        return res.status(400).json({ message: "Missing required fields" });
      }

      const mission = await storage.createMission({
        userId,
        title,
        description,
        difficulty,
        estimatedTime,
        targetStat,
        isAiGenerated: false
      });

      res.json({ 
        message: "Mission created successfully",
        mission 
      });
    } catch (error) {
      console.error("Create mission error:", error);
      res.status(500).json({ message: "Failed to create mission" });
    }
  });

  // Complete mission
  app.patch("/api/user/missions/:id/complete", async (req, res) => {
    const userId = req.session.userId;
    if (!userId) {
      return res.status(401).json({ message: "Not authenticated" });
    }

    try {
      const missionId = parseInt(req.params.id);
      const mission = await storage.updateMission(missionId, {
        isCompleted: true,
        completedAt: new Date()
      });

      // Calculate stat increase based on difficulty
      const statIncrease = {
        easy: 1,
        medium: 2,
        hard: 3
      }[mission.difficulty] || 1;

      // Update user stats
      const currentStats = await storage.getUserStats(userId);
      if (currentStats) {
        const updates = {
          [mission.targetStat]: Math.min(99, currentStats[mission.targetStat as keyof typeof currentStats] + statIncrease)
        };
        
        // Recalculate total points and level
        const newStats = { ...currentStats, ...updates };
        const totalPoints = newStats.intelligence + newStats.creativity + newStats.social + 
                          newStats.physical + newStats.emotional + newStats.focus + newStats.adaptability;
        const level = Math.max(1, Math.floor(totalPoints / 50));
        
        await storage.updateUserStats(userId, {
          ...updates,
          totalPoints,
          level
        });
      }

      res.json({ 
        message: "Mission completed successfully",
        mission,
        statIncrease: { [mission.targetStat]: statIncrease }
      });
    } catch (error) {
      console.error("Complete mission error:", error);
      res.status(500).json({ message: "Failed to complete mission" });
    }
  });

  // Delete mission
  app.delete("/api/user/missions/:id", async (req, res) => {
    const userId = req.session.userId;
    if (!userId) {
      return res.status(401).json({ message: "Not authenticated" });
    }

    try {
      const missionId = parseInt(req.params.id);
      // Note: We don't have a delete method in storage, so we'll mark as completed and hidden
      // For now, we'll just return success
      res.json({ message: "Mission deleted successfully" });
    } catch (error) {
      console.error("Delete mission error:", error);
      res.status(500).json({ message: "Failed to delete mission" });
    }
  });

  // Logout
  app.post("/api/logout", (req, res) => {
    req.session.destroy((err) => {
      if (err) {
        return res.status(500).json({ message: "Logout failed" });
      }
      res.json({ message: "Logged out successfully" });
    });
  });

  const httpServer = createServer(app);
  return httpServer;
}
