import type { Express, Request } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { insertUserSchema, insertUserAnalysisSchema, insertUserProfileSchema } from "@shared/schema";
import { analyzeUserInput, generateMissions } from "./bedrock";
import { getDefaultStats, calculateStatIncreases, DIFFICULTY_MULTIPLIER } from "./utils/stats";
import { createErrorResponse, createSuccessResponse, handleAsyncRoute, requireAuth } from "./utils/response";
import { z } from "zod";

// Extend Express Request type to include session
declare module 'express-serve-static-core' {
  interface Request {
    session: {
      userId?: number;
      questionnaireData?: {
        inputMethod: string;
        inputData: any;
      };
      destroy(callback: (err?: any) => void): void;
    };
  }
}

export async function registerRoutes(app: Express): Promise<Server> {
  // User registration
  app.post("/api/register", async (req, res) => {
    try {
      const userData = insertUserSchema.parse(req.body);
      
      // Check if username already exists
      const existingUser = await storage.getUserByUsername(userData.username);
      if (existingUser) {
        return res.status(400).json({ message: "Username already exists" });
      }

      // Create user
      const user = await storage.createUser(userData);
      
      let generatedStats = getDefaultStats();

      // If questionnaire data exists in session, analyze it with Bedrock and generate stats
      if (req.session.questionnaireData) {
        try {
          // Create initial analysis record with pending status
          const pendingAnalysis = await storage.createUserAnalysis({
            userId: user.id,
            inputMethod: req.session.questionnaireData.inputMethod,
            inputData: req.session.questionnaireData.inputData,
            analysisResult: { status: 'pending' },
          });

          // Analyze user input with Bedrock AI
          generatedStats = await analyzeUserInput(
            req.session.questionnaireData.inputMethod,
            req.session.questionnaireData.inputData
          );

          // Extract summary and explanations from Bedrock response
          const { summary, statExplanations, ...statsOnly } = generatedStats;
          
          // Update analysis record with results
          await storage.createUserAnalysis({
            userId: user.id,
            inputMethod: req.session.questionnaireData.inputMethod,
            inputData: req.session.questionnaireData.inputData,
            analysisResult: { ...statsOnly, status: 'completed' },
            summary: summary || null,
            statExplanations: statExplanations || null,
          });

          // Clear the session data
          delete req.session.questionnaireData;
        } catch (error) {
          console.error("Bedrock analysis failed:", error);
          // Create failed analysis record
          await storage.createUserAnalysis({
            userId: user.id,
            inputMethod: req.session.questionnaireData.inputMethod,
            inputData: req.session.questionnaireData.inputData,
            analysisResult: { status: 'failed', error: error.message },
          });
          delete req.session.questionnaireData;
        }
      }

      // Create user stats (either generated by Bedrock or default zeros)
      await storage.createUserStats({
        userId: user.id,
        ...generatedStats,
      });

      res.json({ 
        user: { id: user.id, username: user.username, nickname: user.nickname },
        statsGenerated: req.session.questionnaireData !== undefined
      });
    } catch (error) {
      console.error("Registration error:", error);
      res.status(400).json({ message: "Invalid registration data" });
    }
  });

  // User login
  app.post("/api/login", async (req, res) => {
    try {
      const { username, password } = req.body;
      
      if (!username || !password) {
        return res.status(400).json({ message: "Username and password required" });
      }

      const user = await storage.getUserByUsername(username);
      if (!user || user.password !== password) {
        return res.status(401).json({ message: "Invalid credentials" });
      }

      // Set session
      (req.session as any).userId = user.id;
      
      res.json({ user: { id: user.id, username: user.username, nickname: user.nickname } });
    } catch (error) {
      console.error("Login error:", error);
      res.status(500).json({ message: "Login failed" });
    }
  });

  // Get current user
  app.get("/api/user", async (req, res) => {
    try {
      const userId = (req.session as any).userId;
      if (!userId) {
        return res.status(401).json({ message: "Not authenticated" });
      }

      const user = await storage.getUser(userId);
      if (!user) {
        return res.status(404).json({ message: "User not found" });
      }

      res.json({ user: { id: user.id, username: user.username, nickname: user.nickname } });
    } catch (error) {
      console.error("Get user error:", error);
      res.status(500).json({ message: "Failed to get user" });
    }
  });

  // Get user stats
  app.get("/api/user/stats", async (req, res) => {
    try {
      const userId = (req.session as any).userId;
      if (!userId) {
        return res.status(401).json({ message: "Not authenticated" });
      }

      const stats = await storage.getUserStats(userId);
      if (!stats) {
        return res.status(404).json({ message: "Stats not found" });
      }

      // Get latest analysis status and summary
      const analyses = await storage.getUserAnalysis(userId);
      const latestAnalysis = analyses[analyses.length - 1];
      const analysisStatus = latestAnalysis?.analysisResult?.status || 'none';
      const analysisSummary = latestAnalysis?.summary || null;
      const statExplanations = latestAnalysis?.statExplanations || null;

      res.json({ 
        stats, 
        analysisStatus,
        analysisSummary,
        statExplanations,
        hasAnalysisData: analyses.length > 0 
      });
    } catch (error) {
      console.error("Get user stats error:", error);
      res.status(500).json({ message: "Failed to get user stats" });
    }
  });

  // Retry analysis
  app.post("/api/retry-analysis", async (req, res) => {
    try {
      const userId = (req.session as any).userId;
      if (!userId) {
        return res.status(401).json({ message: "Not authenticated" });
      }

      // Get user's analysis data
      const analyses = await storage.getUserAnalysis(userId);
      if (analyses.length === 0) {
        return res.status(404).json({ message: "No analysis data found" });
      }

      const latestAnalysis = analyses[analyses.length - 1];
      
      try {
        // Retry Bedrock analysis
        const generatedStats = await analyzeUserInput(
          latestAnalysis.inputMethod,
          latestAnalysis.inputData
        );

        // Update analysis record with results
        await storage.createUserAnalysis({
          userId,
          inputMethod: latestAnalysis.inputMethod,
          inputData: latestAnalysis.inputData,
          analysisResult: { ...generatedStats, status: 'completed' },
        });

        // Update user stats
        await storage.updateUserStats(userId, generatedStats);

        res.json({ 
          message: "Analysis completed successfully",
          stats: generatedStats
        });
      } catch (error) {
        console.error("Retry analysis failed:", error);
        await storage.createUserAnalysis({
          userId,
          inputMethod: latestAnalysis.inputMethod,
          inputData: latestAnalysis.inputData,
          analysisResult: { status: 'failed', error: error.message },
        });
        res.status(500).json({ message: "Analysis failed again: " + error.message });
      }
    } catch (error) {
      console.error("Retry analysis error:", error);
      res.status(500).json({ message: "Failed to retry analysis" });
    }
  });

  // Submit questionnaire (for non-authenticated users)
  app.post("/api/submit-questionnaire", async (req, res) => {
    try {
      const { answers } = req.body;
      if (!answers || typeof answers !== 'object') {
        return res.status(400).json({ message: "Invalid questionnaire data" });
      }

      // Store in session for later use after registration
      req.session.questionnaireData = {
        inputMethod: 'questionnaire',
        inputData: answers,
      };
      
      res.json({ message: "Questionnaire submitted successfully" });
    } catch (error) {
      console.error("Questionnaire submission error:", error);
      res.status(500).json({ message: "Failed to submit questionnaire" });
    }
  });

  // Submit GPT analysis (for non-authenticated users)
  app.post("/api/submit-gpt-analysis", async (req, res) => {
    try {
      const { gptResponse } = req.body;
      if (!gptResponse || typeof gptResponse !== 'string') {
        return res.status(400).json({ message: "Invalid GPT response data" });
      }

      // Store in session for later use after registration
      req.session.questionnaireData = {
        inputMethod: 'gpt-paste',
        inputData: { gptResponse },
      };
      
      res.json({ message: "GPT analysis submitted successfully" });
    } catch (error) {
      console.error("GPT analysis submission error:", error);
      res.status(500).json({ message: "Failed to submit GPT analysis" });
    }
  });

  // Get user missions
  app.get("/api/user/missions", async (req, res) => {
    const userId = req.session.userId;
    if (!userId) {
      return res.status(401).json({ message: "Not authenticated" });
    }

    try {
      const missions = await storage.getUserMissions(userId);
      res.json({ missions });
    } catch (error) {
      console.error("Get missions error:", error);
      res.status(500).json({ message: "Failed to fetch missions" });
    }
  });

  // Get completed missions with completion level data
  app.get("/api/user/missions/completed", async (req, res) => {
    const userId = req.session.userId;
    if (!userId) {
      return res.status(401).json({ message: "Not authenticated" });
    }

    try {
      const missions = await storage.getUserMissions(userId);
      const completedMissions = missions.filter(mission => mission.isCompleted && mission.completedAtLevel);
      res.json({ missions: completedMissions });
    } catch (error) {
      console.error("Get completed missions error:", error);
      res.status(500).json({ message: "Failed to fetch completed missions" });
    }
  });

  // Get current level completed missions count
  app.get("/api/user/missions/completed/current-level", async (req, res) => {
    const userId = req.session.userId;
    if (!userId) {
      return res.status(401).json({ message: "Not authenticated" });
    }

    try {
      const userStats = await storage.getUserStats(userId);
      if (!userStats) {
        return res.status(404).json({ message: "User stats not found" });
      }

      const missions = await storage.getUserMissions(userId);
      const currentLevelCompletedMissions = missions.filter(mission => 
        mission.isCompleted && mission.completedAtLevel === userStats.level
      );
      
      res.json({ 
        count: currentLevelCompletedMissions.length,
        level: userStats.level 
      });
    } catch (error) {
      console.error("Get current level completed missions count error:", error);
      res.status(500).json({ message: "Failed to fetch current level completed missions count" });
    }
  });

  // Get recent stat events for dashboard
  app.get("/api/user/stat-events", async (req, res) => {
    const userId = req.session.userId;
    if (!userId) {
      return res.status(401).json({ message: "Not authenticated" });
    }

    try {
      const { stat } = req.query;
      const events = await storage.getRecentStatEvents(userId, stat as string, 3);
      res.json({ events });
    } catch (error) {
      console.error("Get stat events error:", error);
      res.status(500).json({ message: "Failed to get stat events" });
    }
  });

  // Generate AI missions for user
  app.post("/api/user/generate-missions", async (req, res) => {
    const userId = req.session.userId;
    if (!userId) {
      return res.status(401).json({ message: "Not authenticated" });
    }

    try {
      // Get current missions to check limit
      const currentMissions = await storage.getUserMissions(userId);
      const activeMissions = currentMissions.filter(m => !m.isCompleted);
      
      const maxMissions = 10;
      const currentActiveCount = activeMissions.length;
      
      if (currentActiveCount >= maxMissions) {
        return res.status(400).json({ 
          message: "Maximum mission limit reached",
          currentCount: currentActiveCount,
          maxCount: maxMissions
        });
      }

      // Calculate how many missions to generate
      const missionsToGenerate = Math.min(4, maxMissions - currentActiveCount);

      // Get user stats
      const userStats = await storage.getUserStats(userId);
      if (!userStats) {
        return res.status(404).json({ message: "User stats not found" });
      }

      // Get user profile for personalized missions
      const userProfile = await storage.getUserProfile(userId);

      // Generate missions using Bedrock AI
      const profileData = userProfile ? {
        gender: userProfile.gender || undefined,
        ageGroup: userProfile.ageGroup || undefined,
        affiliation: userProfile.affiliation || undefined,
        interests: userProfile.interests || undefined,
        additionalInfo: userProfile.additionalInfo || undefined,
        desiredSelf: userProfile.desiredSelf || undefined
      } : undefined;
      const generatedMissions = await generateMissions(userId, userStats, missionsToGenerate, profileData);
      
      // Save missions to database
      const savedMissions = [];
      for (const mission of generatedMissions) {
        const savedMission = await storage.createMission({
          userId,
          title: mission.title,
          description: mission.description,
          difficulty: mission.difficulty,
          estimatedTime: mission.estimatedTime,
          targetStats: Array.isArray(mission.targetStats) ? mission.targetStats : [mission.targetStat || mission.targetStats],
          isAiGenerated: true
        });
        savedMissions.push(savedMission);
      }

      res.json({ 
        message: `${savedMissions.length}개의 AI 미션이 생성되었습니다`,
        missions: savedMissions,
        currentCount: currentActiveCount + savedMissions.length,
        maxCount: maxMissions
      });
    } catch (error) {
      console.error("Generate missions error:", error);
      res.status(500).json({ message: "Failed to generate missions" });
    }
  });

  // Add custom mission
  app.post("/api/user/missions", async (req, res) => {
    const userId = req.session.userId;
    if (!userId) {
      return res.status(401).json({ message: "Not authenticated" });
    }

    try {
      // Check mission limit
      const currentMissions = await storage.getUserMissions(userId);
      const activeMissions = currentMissions.filter(m => !m.isCompleted);
      
      const maxMissions = 10;
      if (activeMissions.length >= maxMissions) {
        return res.status(400).json({ 
          message: "Maximum mission limit reached",
          currentCount: activeMissions.length,
          maxCount: maxMissions
        });
      }

      const { title, description, difficulty, estimatedTime, targetStats } = req.body;
      
      if (!title || !description || !difficulty || !estimatedTime || !targetStats || !Array.isArray(targetStats) || targetStats.length === 0 || targetStats.length > 3) {
        return res.status(400).json({ message: "Missing required fields or invalid targetStats (must be 1-3 stats)" });
      }

      const mission = await storage.createMission({
        userId,
        title,
        description,
        difficulty,
        estimatedTime,
        targetStats,
        isAiGenerated: false
      });

      res.json({ 
        message: "Mission created successfully",
        mission,
        currentCount: activeMissions.length + 1,
        maxCount: maxMissions
      });
    } catch (error) {
      console.error("Create mission error:", error);
      res.status(500).json({ message: "Failed to create mission" });
    }
  });

  // Complete mission
  app.patch("/api/user/missions/:id/complete", handleAsyncRoute(async (req, res) => {
    const userId = requireAuth(req, res);
    if (!userId) return;

    const missionId = parseInt(req.params.id);
    
    // Get current user stats to record completion level
    const currentStats = await storage.getUserStats(userId);
    const completionLevel = currentStats?.level || 1;
    
    const mission = await storage.updateMission(missionId, {
      isCompleted: true,
      completedAt: new Date(),
      completedAtLevel: completionLevel
    });

    // Update user stats if they exist
    if (currentStats) {
      // Handle nested array format for targetStats
      const flatStats = Array.isArray(mission.targetStats[0]) 
        ? mission.targetStats[0] 
        : mission.targetStats;
      
      const statIncreases = calculateStatIncreases(flatStats, mission.difficulty as 'easy' | 'medium' | 'hard');
      const updates: Record<string, number> = {};
      
      for (const [stat, increase] of Object.entries(statIncreases)) {
        const currentValue = currentStats[stat as keyof typeof currentStats] as number;
        updates[stat] = currentValue + increase;
      }
      
      await storage.updateUserStats(userId, updates);

      // Create stat events for tracking
      try {
        for (const [stat, increase] of Object.entries(statIncreases)) {
          await storage.createStatEvent({
            userId,
            statName: stat,
            eventType: 'mission_complete',
            eventDescription: mission.title,
            statChange: increase,
            sourceId: missionId,
          });
        }
      } catch (eventError) {
        console.error("Failed to create stat events:", eventError);
      }

      createSuccessResponse(res, {
        mission,
        statIncrease: statIncreases
      }, "Mission completed successfully");
    } else {
      createSuccessResponse(res, { mission }, "Mission completed successfully");
    }
  }));

  // Delete mission
  app.delete("/api/user/missions/:id", async (req, res) => {
    const userId = req.session.userId;
    if (!userId) {
      return res.status(401).json({ message: "Not authenticated" });
    }

    try {
      const missionId = parseInt(req.params.id);
      if (isNaN(missionId)) {
        return res.status(400).json({ message: "Invalid mission ID" });
      }

      // Check if mission belongs to user
      const missions = await storage.getUserMissions(userId);
      const mission = missions.find(m => m.id === missionId);
      
      if (!mission) {
        return res.status(404).json({ message: "Mission not found" });
      }

      if (mission.isCompleted) {
        return res.status(400).json({ message: "Cannot delete completed mission" });
      }

      await storage.deleteMission(missionId);

      res.json({ message: "Mission deleted successfully" });
    } catch (error) {
      console.error("Delete mission error:", error);
      res.status(500).json({ message: "Failed to delete mission" });
    }
  });

  // Level up user
  app.post("/api/user/level-up", async (req, res) => {
    const userId = req.session.userId;
    if (!userId) {
      return res.status(401).json({ message: "Not authenticated" });
    }

    try {
      const canLevelUp = await storage.checkLevelUpEligibility(userId);
      if (!canLevelUp) {
        return res.status(400).json({ 
          message: "레벨업 조건을 만족하지 않습니다. 모든 스탯이 레벨 요구치 이상이고 총합이 충분해야 합니다." 
        });
      }

      const updatedStats = await storage.levelUpUser(userId);
      res.json({ 
        message: "레벨업 완료!", 
        stats: updatedStats 
      });
    } catch (error) {
      console.error("Level up error:", error);
      res.status(500).json({ message: "레벨업 실패" });
    }
  });

  // Check level up eligibility
  app.get("/api/user/can-level-up", async (req, res) => {
    const userId = req.session.userId;
    if (!userId) {
      return res.status(401).json({ message: "Not authenticated" });
    }

    try {
      const canLevelUp = await storage.checkLevelUpEligibility(userId);
      const stats = await storage.getUserStats(userId);
      
      if (stats) {
        const nextLevel = stats.level + 1;
        const requiredTotalStats = nextLevel * 100;
        const currentTotal = stats.intelligence + stats.creativity + stats.social + 
                           stats.physical + stats.emotional + stats.focus + stats.adaptability;
        
        res.json({ 
          canLevelUp,
          requirements: {
            totalStatsRequired: requiredTotalStats,
            currentTotal,
            currentLevel: stats.level,
            nextLevel
          }
        });
      } else {
        res.status(404).json({ message: "사용자 스탯을 찾을 수 없습니다" });
      }
    } catch (error) {
      console.error("Check level up eligibility error:", error);
      res.status(500).json({ message: "레벨업 조건 확인 실패" });
    }
  });

  // Regenerate AI analysis
  app.post("/api/user/regenerate-analysis", handleAsyncRoute(async (req, res) => {
    const userId = requireAuth(req, res);
    if (!userId) return;

    try {
      // Get current user data
      const user = await storage.getUser(userId);
      const userProfile = await storage.getUserProfile(userId);
      const completedMissions = await storage.getUserMissions(userId);
      const currentStats = await storage.getUserStats(userId);

      if (!user || !currentStats) {
        return createErrorResponse(res, 404, "사용자 정보를 찾을 수 없습니다");
      }

      // Prepare comprehensive user data for analysis
      const userData = {
        nickname: user.nickname,
        currentLevel: currentStats.level,
        totalPoints: currentStats.totalPoints,
        currentStats: {
          intelligence: currentStats.intelligence,
          creativity: currentStats.creativity,
          social: currentStats.social,
          physical: currentStats.physical,
          emotional: currentStats.emotional,
          focus: currentStats.focus,
          adaptability: currentStats.adaptability
        },
        profile: userProfile ? {
          desiredSelf: userProfile.desiredSelf,
          ...(userProfile.gender && { gender: userProfile.gender }),
          ...(userProfile.ageGroup && { ageGroup: userProfile.ageGroup }),
          ...(userProfile.affiliation && { affiliation: userProfile.affiliation }),
          ...(userProfile.interests && { interests: userProfile.interests }),
          ...(userProfile.additionalInfo && { additionalInfo: userProfile.additionalInfo })
        } : null,
        completedQuests: completedMissions
          .filter(m => m.isCompleted)
          .map(m => ({
            title: m.title,
            difficulty: m.difficulty,
            targetStats: m.targetStats,
            completedAt: m.completedAt,
            completedAtLevel: m.completedAtLevel
          }))
      };

      // Call AI analysis with comprehensive data
      const analysisResult = await analyzeUserInput('profile-update', userData);

      // Create new analysis record
      await storage.createUserAnalysis({
        userId,
        inputMethod: 'profile-update',
        inputData: userData,
        analysisResult: analysisResult,
        summary: analysisResult.summary || null,
        statExplanations: analysisResult.statExplanations || null
      });

      createSuccessResponse(res, {
        message: "AI 분석이 성공적으로 재생성되었습니다",
        analysis: {
          summary: analysisResult.summary,
          statExplanations: analysisResult.statExplanations
        }
      });

    } catch (error) {
      console.error("Regenerate analysis error:", error);
      createErrorResponse(res, 500, "AI 분석 재생성 중 오류가 발생했습니다", error);
    }
  }));

  // Get user profile
  app.get("/api/user/profile", async (req, res) => {
    const userId = req.session.userId;
    if (!userId) {
      return res.status(401).json({ message: "Not authenticated" });
    }

    try {
      const profile = await storage.getUserProfile(userId);
      res.json({ profile: profile || { currentSelf: null, desiredSelf: null } });
    } catch (error) {
      console.error("Get profile error:", error);
      res.status(500).json({ message: "Failed to fetch profile" });
    }
  });

  // Create or update user profile
  app.post("/api/user/profile", async (req, res) => {
    const userId = req.session.userId;
    if (!userId) {
      return res.status(401).json({ message: "Not authenticated" });
    }

    try {
      const profileData = insertUserProfileSchema.parse({
        userId,
        ...req.body
      });

      // Check if profile exists
      const existingProfile = await storage.getUserProfile(userId);
      
      let profile;
      if (existingProfile) {
        profile = await storage.updateUserProfile(userId, req.body);
      } else {
        profile = await storage.createUserProfile(profileData);
      }

      res.json({ 
        message: "Profile saved successfully",
        profile 
      });
    } catch (error) {
      console.error("Save profile error:", error);
      res.status(500).json({ message: "Failed to save profile" });
    }
  });

  // Logout
  app.post("/api/logout", (req, res) => {
    req.session.destroy((err) => {
      if (err) {
        return res.status(500).json({ message: "Logout failed" });
      }
      res.json({ message: "Logged out successfully" });
    });
  });

  const httpServer = createServer(app);
  return httpServer;
}
